//-----------------------------------------------------------------------------
// AccessTokens.cs
//
// Xbox Advanced Technology Group (ATG)
// Copyright (C) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------

using Newtonsoft.Json;
using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace Microsoft.StoreServices.Authentication
{
    public class AccessTokenTypes
    {
        //  These are the audience values for each access token type
        public const string Service     = "https://onestore.microsoft.com";
        public const string Collections = "https://onestore.microsoft.com/b2b/keys/create/collections";
        public const string Purchase    = "https://onestore.microsoft.com/b2b/keys/create/purchase";
    }

    /// <summary>
    /// Access tokens are generated by your service and either used as the Authorization 
    /// header for calls to the Microsoft.Store services, or sent to the client to
    /// generate a UserStoreId.  The specified Audience of the access token will
    /// determine what it is used for:
    /// Service Access Token -     https://onestore.microsoft.com - Used as the bearer token
    ///                            in the Authorization header of service-to-service calls. 
    /// Purchase Access Token -    https://onestore.microsoft.com/b2b/keys/create/purchase
    ///                            Sent to the client to generate a UserPurchaseId
    /// Collections Access Token - https://onestore.microsoft.com/b2b/keys/create/collections
    ///                            Sent to the client to generate a UserCollectionsId
    /// </summary>
    public class AccessTokens
    {
        /// <summary>
        /// Stand alone API to retrieve the AccessToken for the credentials and Audience
        /// provided.
        /// NOTE, this function does not cache the token if called directly.  To use
        /// the built-in ServerCache use GetAccessTokenAsync().
        /// </summary>
        /// <param name="audience"></param>
        /// <param name="tenantId"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <returns>Access token, otherwise Exception will be thrown</returns>
        public static async Task<AccessToken> CreateAccessTokenAsync(
            string audience,
            string tenantId,
            string clientId,
            string clientSecret,
            HttpClient HttpCaller )
        {
            //  Validate we have the needed values
            {
                if (string.IsNullOrEmpty(audience))
                {
                    throw new ArgumentException($"{nameof(audience)} required", nameof(audience));
                }
                if (string.IsNullOrEmpty(tenantId))
                {
                    throw new ArgumentException($"{nameof(tenantId)} required", nameof(tenantId));
                }
                if (string.IsNullOrEmpty(clientId))
                {
                    throw new ArgumentException($"{nameof(clientId)} required", nameof(clientId));
                }
                if (string.IsNullOrEmpty(audience))
                {
                    throw new ArgumentException($"{nameof(clientSecret)} required", nameof(clientSecret));
                }
                if (HttpCaller == null)
                {
                    throw new ArgumentException($"{nameof(HttpCaller)} cannot be null", nameof(HttpCaller));
                }
            }

            var token = new AccessToken();
            var requestUri = new StringBuilder().AppendFormat("https://login.microsoftonline.com/{0}/oauth2/token", tenantId);            
            var httpRequest = new HttpRequestMessage(HttpMethod.Post, requestUri.ToString());

            var requestBody = new StringBuilder().AppendFormat("grant_type=client_credentials&client_id={0}&client_secret={1}&resource={2}", clientId, clientSecret, audience);
            byte[] requestBodyContent = System.Text.Encoding.UTF8.GetBytes(requestBody.ToString());
            httpRequest.Content = new ByteArrayContent(requestBodyContent);

            // Post the request and wait for the response
            using (var httpResponse = await HttpCaller.SendAsync(httpRequest))
            {
                string responseBody = await httpResponse.Content.ReadAsStringAsync();

                if (httpResponse.IsSuccessStatusCode)
                {
                    token = JsonConvert.DeserializeObject<AccessToken>(responseBody);
                }
                else
                {
                    var message = new StringBuilder();
                    message.AppendFormat("Unable to acquire access token for { 0} : { 1} : { 2}", audience, httpResponse.ReasonPhrase, responseBody);
                    throw new Exception(message.ToString());
                }
            }

            return token;
        }
    }
}
