//-----------------------------------------------------------------------------
// UserStoreIds.cs
//
// Xbox Advanced Technology Group (ATG)
// Copyright (C) Microsoft Corporation. All rights reserved.
//-----------------------------------------------------------------------------

using Newtonsoft.Json;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;

namespace Microsoft.StoreServices
{
    public enum UserStoreIdType
    {
        UserCollectionsId = 0,
        UserPurchaseId,
        Unknown
    }

    /// <summary>
    /// Utility functions to help manage a UserStoreId that has been retrieved 
    /// from the client (UserCollectionsId or UserPurchaseId)
    /// </summary>
    class UserStoreIds
    {
        /// <summary>
        /// Uses the RefreshURI to generate a new UserStoreId key for this user once the current one is expired
        /// </summary>
        /// <param name="expiredStoreId">The UserStoreId that we want to refresh</param>
        /// <param name="serviceToken">AAD token generated by your service with the audience of https://onestore.microsoft.com </param>
        /// <param name="httpClient">HttpClient to be used to make the refresh call</param>
        /// <returns>A new UserStoreId for the same store user with new expire date</returns>
        public static async Task<UserStoreId> RefreshStoreId(UserStoreId expiredStoreId,
                                                             string serviceToken,
                                                             HttpClient httpClient)
        {
            var httpRequest = new HttpRequestMessage(HttpMethod.Post, expiredStoreId.RefreshUri);
            var refreshRequest = new UserStoreIdRefreshRequest()
            {
                ServiceToken = serviceToken,
                UserStoreId = expiredStoreId.Key
            };

            string requestBodyString = JsonConvert.SerializeObject(refreshRequest);
            byte[] requestBodyContent = System.Text.Encoding.UTF8.GetBytes(requestBodyString);
            httpRequest.Content = new ByteArrayContent(requestBodyContent);
            httpRequest.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");

            //  call the service
            var httpResponse = await httpClient.SendAsync(httpRequest);
            string responseBody = await httpResponse.Content.ReadAsStringAsync();
            var response = JsonConvert.DeserializeObject<UserStoreIdRefreshResponse>(responseBody);

            return new UserStoreId(response.Key);
        }
    }
}
